version: '3.8'

services:
  # Registry service (includes nginx, SSL, FAISS, models)
  registry:
    build:
      context: .
      dockerfile: docker/Dockerfile.registry
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_USER=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - AUTH_SERVER_URL=${AUTH_SERVER_URL}
      - AUTH_SERVER_EXTERNAL_URL=${AUTH_SERVER_EXTERNAL_URL}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
      - COGNITO_CLIENT_SECRET=${COGNITO_CLIENT_SECRET}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - HEALTH_CHECK_INTERVAL_SECONDS=${HEALTH_CHECK_INTERVAL_SECONDS:-30}
      - SRE_GATEWAY_AUTH_TOKEN=${SRE_GATEWAY_AUTH_TOKEN}
      - ATLASSIAN_AUTH_TOKEN=${ATLASSIAN_AUTH_TOKEN}
      # Metrics configuration
      - METRICS_SERVICE_URL=http://metrics-service:8890
      - METRICS_API_KEY=${METRICS_API_KEY_REGISTRY}
      - METRICS_API_KEY_NGINX=${METRICS_API_KEY_REGISTRY}
      # Keycloak configuration
      - AUTH_PROVIDER=${AUTH_PROVIDER:-cognito}
      - KEYCLOAK_ENABLED=${KEYCLOAK_ENABLED:-false}
      - KEYCLOAK_URL=${KEYCLOAK_URL:-http://keycloak:8080}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-mcp-gateway}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID:-mcp-gateway-web}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KEYCLOAK_M2M_CLIENT_ID=${KEYCLOAK_M2M_CLIENT_ID}
      - KEYCLOAK_M2M_CLIENT_SECRET=${KEYCLOAK_M2M_CLIENT_SECRET}
    ports:
      - "80:80"
      - "443:443"
      - "7860:7860"
    volumes:
      - ${HOME}/mcp-gateway/servers:/app/registry/servers
      - ${HOME}/mcp-gateway/models:/app/registry/models
      - ${HOME}/mcp-gateway/logs:/app/logs
      - ${HOME}/mcp-gateway/auth_server/scopes.yml:/app/auth_server/scopes.yml
      - ${HOME}/mcp-gateway/ssl:/etc/ssl:ro
    depends_on:
      - auth-server
      - metrics-service
    restart: unless-stopped

  # Metrics Collection Service
  metrics-service:
    build:
      context: .
      dockerfile: metrics-service/Dockerfile
    environment:
      - METRICS_SERVICE_PORT=8890
      - METRICS_SERVICE_HOST=0.0.0.0
      - SQLITE_DB_PATH=/var/lib/sqlite/metrics.db
      - METRICS_RETENTION_DAYS=90
      - METRICS_API_KEY_AUTH=${METRICS_API_KEY_AUTH_SERVER}
      - METRICS_API_KEY_REGISTRY=${METRICS_API_KEY_REGISTRY}
      - METRICS_API_KEY_MCPGW=${METRICS_API_KEY_MCPGW_SERVER}
      - OTEL_SERVICE_NAME=mcp-metrics-service
      - OTEL_PROMETHEUS_ENABLED=true
      - OTEL_PROMETHEUS_PORT=9465
      - METRICS_RATE_LIMIT=1000
    ports:
      - "8890:8890"
      - "9465:9465"  # Prometheus metrics endpoint
    volumes:
      - metrics-db-data:/var/lib/sqlite
      - ${HOME}/mcp-gateway/logs:/app/logs
    depends_on:
      - metrics-db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8890/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth service (separate and scalable)
  auth-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.auth
    environment:
      - REGISTRY_URL=${REGISTRY_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_USER=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
      - COGNITO_CLIENT_SECRET=${COGNITO_CLIENT_SECRET}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - COGNITO_DOMAIN=${COGNITO_DOMAIN:-auto}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      # Metrics configuration
      - METRICS_SERVICE_URL=http://metrics-service:8890
      - METRICS_API_KEY=${METRICS_API_KEY_AUTH_SERVER}
      # Keycloak configuration
      - AUTH_PROVIDER=${AUTH_PROVIDER:-cognito}  # 'cognito' or 'keycloak'
      - KEYCLOAK_ENABLED=${KEYCLOAK_ENABLED:-false}
      - KEYCLOAK_URL=${KEYCLOAK_URL:-http://keycloak:8080}
      - KEYCLOAK_EXTERNAL_URL=${KEYCLOAK_EXTERNAL_URL:-http://localhost:8080}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-mcp-gateway}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID:-mcp-gateway-web}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - KEYCLOAK_M2M_CLIENT_ID=${KEYCLOAK_M2M_CLIENT_ID:-mcp-gateway-m2m}
      - KEYCLOAK_M2M_CLIENT_SECRET=${KEYCLOAK_M2M_CLIENT_SECRET}
    ports:
      - "8888:8888"
    volumes:
      - ${HOME}/mcp-gateway/logs:/app/logs
      - ${HOME}/mcp-gateway/auth_server/scopes.yml:/app/scopes.yml
    restart: unless-stopped

  # Current Time MCP Server
  currenttime-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp-server
      args:
        SERVER_PATH: servers/currenttime
    environment:
      - PORT=8000
      - MCP_TRANSPORT=streamable-http
    ports:
      - "8000:8000"
    restart: unless-stopped

  # Financial Info MCP Server
  fininfo-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp-server
      args:
        SERVER_PATH: servers/fininfo
    environment:
      - PORT=8001
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ${HOME}/mcp-gateway/secrets/fininfo/:/app/fininfo/
    ports:
      - "8001:8001"
    restart: unless-stopped

  # MCP Gateway Server
  mcpgw-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp-server
      args:
        SERVER_PATH: servers/mcpgw
    environment:
      - PORT=8003
      - REGISTRY_BASE_URL=http://registry:7860
      - REGISTRY_USERNAME=${ADMIN_USER:-admin}
      - REGISTRY_PASSWORD=${ADMIN_PASSWORD}
    volumes:
      - ${HOME}/mcp-gateway/servers:/app/registry/servers
      - ${HOME}/mcp-gateway/models:/app/registry/models
      - ${HOME}/mcp-gateway/auth_server/scopes.yml:/app/auth_server/scopes.yml
    ports:
      - "8003:8003"
    depends_on:
      - registry
    restart: unless-stopped

  # Real Server Fake Tools MCP Server
  realserverfaketools-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp-server
      args:
        SERVER_PATH: servers/realserverfaketools
    environment:
      - PORT=8002
    ports:
      - "8002:8002"
    restart: unless-stopped


  # Atlassian MCP Server
  atlassian-server:
    image: ghcr.io/sooperset/mcp-atlassian:latest
    environment:
      - ATLASSIAN_OAUTH_ENABLE=true
      - MCP_VERY_VERBOSE=true
      - MCP_LOGGING_STDOUT=true
    ports:
      - "8005:8005"
    volumes:
      - $HOME/.mcp-atlassian:/home/app/.mcp-atlassian
    command: --transport streamable-http --port 8005
    restart: unless-stopped

  # SQLite container for metrics database
  metrics-db:
    image: alpine:latest
    volumes:
      - metrics-db-data:/var/lib/sqlite
    command: ["sh", "-c", "apk add --no-cache sqlite && mkdir -p /var/lib/sqlite && sqlite3 /var/lib/sqlite/metrics.db 'CREATE TABLE IF NOT EXISTS _health (id INTEGER);' && tail -f /dev/null"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sqlite3", "/var/lib/sqlite/metrics.db", ".tables"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

  # PostgreSQL database for Keycloak
  keycloak-db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-keycloak}
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:25.0
    command: start-dev  # Use 'start' for production with proper SSL
    environment:
      # Database configuration
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-keycloak}

      # Admin credentials
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}

      # HTTP configuration
      KC_HTTP_ENABLED: 'true'
      KC_HTTP_PORT: 8080
      KC_HOSTNAME_STRICT: 'false'
      KC_HOSTNAME_STRICT_HTTPS: 'false'
      KC_PROXY: edge  # Running behind nginx

      # Frontend URL for external JWT issuer
      KC_FRONTEND_URL: ${KEYCLOAK_EXTERNAL_URL:-http://localhost:8080}

      # Features
      KC_FEATURES: token-exchange,admin-api

      # Logging
      KC_LOG_LEVEL: INFO
      
    ports:
      - "8080:8080"
    depends_on:
      keycloak-db:
        condition: service_healthy
    volumes:
      - ./keycloak/themes:/opt/keycloak/themes
      - ./keycloak/providers:/opt/keycloak/providers
      - ./keycloak/import:/opt/keycloak/data/import
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  ssl_data:
  keycloak_db_data:
  metrics-db-data:
  prometheus-data:
  grafana-data:
